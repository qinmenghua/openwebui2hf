name: 部署并批量重新构建 Hugging Face 空间

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'  # 每天 UTC 20:00 (北京时间凌晨 3:00)

env:
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  HF_USER: ${{ secrets.HF_USER }}
  HF_REPO: ${{ secrets.HF_REPO }}
  TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
  TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}

jobs:
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      token-set: ${{ steps.check-key.outputs.defined }}
    steps:
      - id: check-key
        env:
          HF_TOKEN: ${{ env.HF_TOKEN }}
        if: "${{ env.HF_TOKEN != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT

  deploy-and-rebuild:
    runs-on: ubuntu-latest
    needs: [check-secret]
    if: needs.check-secret.outputs.token-set == 'true'
    steps:
      - name: 检出存储库
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: 删除 Git 历史记录
        run: rm -rf .git

      - name: 将 YAML 添加到 README.md 中
        run: |
          echo "---" > temp_readme.md
          echo "title: Open WebUI" >> temp_readme.md
          echo "emoji: 🐳" >> temp_readme.md
          echo "colorFrom: purple" >> temp_readme.md
          echo "colorTo: gray" >> temp_readme.md
          echo "sdk: docker" >> temp_readme.md
          echo "app_port: 8080" >> temp_readme.md
          echo "---" >> temp_readme.md
          cat README.md >> temp_readme.md
          mv temp_readme.md README.md

      - name: 配置 Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: 设置 Git 并推送到抱抱脸空间
        run: |
          git init --initial-branch=main
          git lfs install
          git lfs track "*.ttf"
          git lfs track "*.jpg"
          git add .
          git commit -m "GitHub deploy: ${{ github.sha }}"
          git push --force https://${HF_USER}:${HF_TOKEN}@huggingface.co/spaces/${HF_USER}/${HF_REPO} main

      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests huggingface_hub

      - name: 批量重新构建空间
        id: rebuild
        run: |
          python <<EOF
          import os
          import requests
          import time
          from huggingface_hub import HfApi

          # 配置
          HF_TOKEN = os.environ['HF_TOKEN']
          USERNAME = os.environ['HF_USER']

          # 定义需要重新构建的空间列表
          SPACE_LIST = [
              "open-webui",
          ]

          # 检查空间是否存在，如果不存在则创建
          api = HfApi(token=HF_TOKEN)
          for space_name in SPACE_LIST:
              try:
                  api.repo_info(f"{USERNAME}/{space_name}", repo_type="space")
                  print(f"空间 {space_name} 已存在，跳过创建。")
              except Exception as e:
                  print(f"空间 {space_name} 不存在，正在创建...")
                  api.create_repo(
                      repo_id=f"{USERNAME}/{space_name}",
                      repo_type="space",
                      space_sdk="docker",
                      space_hardware="cpu-basic",
                      private=False
                  )
                  print(f"空间 {space_name} 已成功创建。")

          # 重新构建空间
          def rebuild_space(space_name):
              full_space_name = f"{USERNAME}/{space_name}"
              print(f"\n{'='*50}")
              print(f"🔄 开始重新构建空间：{full_space_name}")

              rebuild_url = f"https://huggingface.co/api/spaces/{full_space_name}/restart?factory=true"
              status_url = f"https://huggingface.co/api/spaces/{full_space_name}/runtime"
              headers = {
                  "Authorization": f"Bearer {HF_TOKEN}",
                  "Content-Type": "application/json"
              }

              try:
                  response = requests.post(rebuild_url, headers=headers)
                  if response.status_code == 200:
                      print(f"✅ 重新构建请求已发送成功")
                      max_attempts = 10
                      for attempt in range(max_attempts):
                          print(f"⏳ 等待30秒后检查状态... (尝试 {attempt + 1}/{max_attempts})")
                          time.sleep(30)
                          status_response = requests.get(status_url, headers=headers)
                          if status_response.status_code == 200:
                              status_data = status_response.json()
                              stage = status_data.get("stage", "")
                              print(f"当前状态: {stage}")
                              if stage == "RUNNING":
                                  print(f"✅ 空间 {space_name} 已成功重新构建!")
                                  return True
                              elif stage == "RUNNING_BUILDING":
                                  print("🏗️ 空间正在构建中...")
                              elif "ERROR" in stage:
                                  print(f"❌ 检测到错误: {stage}")
                                  return False
                          else:
                              print(f"⚠️ 获取状态失败，状态码: {status_response.status_code}")
                      print("⚠️ 达到最大尝试次数，重新构建状态未知")
                      return None
                  else:
                      print(f"❌ 重新构建请求失败. 状态码: {response.status_code}")
                      print(f"响应内容: {response.text}")
                      return False
              except Exception as e:
                  print(f"❌ 发生错误: {str(e)}")
                  return False

          # 主程序
          results = {}
          for space_name in SPACE_LIST:
              result = rebuild_space(space_name)
              results[space_name] = result

          # 生成总结信息
          summary = "批量重新构建结果：\n"
          for space_name, result in results.items():
              if result is True:
                  summary += f"✅ 空间 {space_name} 重新构建成功\n"
              elif result is False:
                  summary += f"❌ 空间 {space_name} 重新构建失败\n"
              else:
                  summary += f"❓ 空间 {space_name} 重新构建状态未知\n"

          # 保存结果到 GitHub Actions 输出
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f"summary={summary}", file=f)

          # 如果有失败的空间，退出码为 1
          if any(result is False for result in results.values()):
              exit(1)
          EOF

      - name: 发送 Telegram 通知
        if: always()
        run: |
          SUMMARY="${{ steps.rebuild.outputs.summary }}"
          MESSAGE=$(echo -e "Hugging Face 空间部署和批量重新构建结果：\n${SUMMARY}")
          curl -s -X POST https://api.telegram.org/bot${{ env.TG_BOT_TOKEN }}/sendMessage \
               -d chat_id=${{ env.TG_CHAT_ID }} \
               -d text="$MESSAGE" \
               -d parse_mode=Markdown

      - name: 检查重新构建结果
        if: always()
        run: |
          exit ${{ steps.rebuild.outputs.exit_code }}

      - name: 完成状态
        if: always()
        run: |
          echo "🏁 部署和批量重新构建流程已完成"
